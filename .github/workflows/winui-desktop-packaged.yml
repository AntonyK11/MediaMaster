name: WinUI 3 MSIX MediaMaster

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]

    runs-on: windows-latest

    env:
      Solution_Name: MediaMaster.sln
      Publish_Output_Folder: Packages/

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add MSBuild to the PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}

    # Create the app package by building and packaging the project
    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=${{ matrix.configuration }} /p:PublishProfile=Properties\PublishProfiles\win-${{ matrix.platform }}.pubxml /p:Platform=${{ matrix.platform }} /p:PlatformTarget=${{ matrix.platform }} /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=MediaMaster_TemporaryKey.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: ${{ env.Publish_Output_Folder }}

    # Upload the MSIX package
    - name: Upload MediaMaster MSIX package
      uses: actions/upload-artifact@v4
      with:
        name: MediaMaster MSIX Package
        path: ${{ env.Publish_Output_Folder }}
        if-no-files-found: error
